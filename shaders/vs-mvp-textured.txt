// 3D, perspective, view, texture support

// If device support high precision floats, use it
#ifdef GL_FRAGMENT_PRECISION_HIGH
	precision highp float;
#else
	precision mediump float;
#endif

attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aVertexTextureCoord;

// Model matrix
uniform mat4 uMMatrix;
// Projection matrix
uniform mat4 uPMatrix;
// View matrix
uniform mat4 uVMatrix;

varying vec4 vWorldSpaceNormal;
varying vec2 vVertexTextureCoord;

void main() {
	// 1.0 at the end, cause it's a position matrix
	gl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aVertexPosition, 1.0);
	// 0.0 at the end, cause it's a direction matrix
	vWorldSpaceNormal = uMMatrix * vec4(aVertexNormal, 0.0);
	vVertexTextureCoord = aVertexTextureCoord;
}