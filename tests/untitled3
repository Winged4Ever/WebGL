 /// <summary>  
    /// Yaw in the counter-clockwise direction.  
    /// </summary>  
    /// <param name="radians">Radians to Yaw</param>  
    public void Yaw(float radians)  
    {  
        switch (mode)  
        {  
            case FirstPersonCameraMode.RollContrained:  
            case FirstPersonCameraMode.PlaneConstrained:  
                //In the FPS camera, the yaw is relative to a human standing vertically   
                //on the ground.  Therefore the yaw is independant of pitch or roll and   
                //is stored seprately.  
                yaw += radians;  
 
                //The quaternion rotation can be calculated by multiplying the pitch  
                //and yaw quaternions.  I generate an orientation anyways, since we   
                //use that to build our view matrix/quaterion.  
                orientation = Quaternion.CreateFromAxisAngle(Vector3.Up, -yaw) *  
                    Quaternion.CreateFromAxisAngle(Vector3.Right, pitch);  
                break;  
 
            case FirstPersonCameraMode.Free:  
                //The completely free-look camera shows the real power of quaternions.  
                //Them current camera orientation is simply multiplied by the rotation  
                //quaternion.  The rotation occurs with respect to the current  
                //orientation, avoiding gimble lock completely  
                orientation = orientation *  
                    Quaternion.CreateFromAxisAngle(Vector3.Up, -radians);  
                break;  
 
        }  
    }  
 
    /// <summary>  
    /// Pitch in the counter-clockwise direction.  
    /// </summary>  
    /// <param name="radians">Radians to Pitch</param>  
    public void Pitch(float radians)  
    {  
        switch (mode)  
        {  
            case FirstPersonCameraMode.RollContrained:  
            case FirstPersonCameraMode.PlaneConstrained:  
                //In the FPS camera, the pitch is relative to a human standing vertically  
                //on the ground. Therefore the pitch is independant of yaw or roll and  
                //is stored seprately.  
                pitch += radians;  
 
                //Typically, we do not want to have situation where the pitch is greater  
                //than or less than vertical because that means the camera would be  
                //upside down!  This is very confusing in an FPS, so the pitch is clamped  
                //to straight up or straight down.  Notice the tiny offset also included;  
                //this is is to prevent the camera from flipping upside-down due to   
                //precision errors.  
                if (mode == FirstPersonCameraMode.PlaneConstrained)  
                {  
                    pitch = MathHelper.Clamp(pitch, -(MathHelper.PiOver2) + .0001f,  
                        (MathHelper.PiOver2) - .0001f);  
                }  
 
                //  
                orientation = Quaternion.CreateFromAxisAngle(Vector3.Up, -yaw) *  
                    Quaternion.CreateFromAxisAngle(Vector3.Right, pitch);  
                break;  
 
            case FirstPersonCameraMode.Free:  
                //The completely free-look camera shows the real power of quaternions.  
                //Them current camera orientation is simply multiplied by the rotation  
                //quaternion.  The rotation occurs with respect to the current  
                //orientation, avoiding gimble lock completely  
                orientation = orientation *  
                    Quaternion.CreateFromAxisAngle(Vector3.Right, radians);  
                break;  
        }  
    }  
 
    /// <summary>  
    /// Roll in the counter-clockwise direction.  
    /// </summary>  
    /// <param name="radians">Radians to Roll</param>  
    public void Roll(float radians)  
    {  
 
        //In a constrianed camera, it's typically not useful to roll the camera   
        //during normal use.  For simplicity, those types of cameras do not support  
        // camera roll, and thus avoids the issue of dertermining a roll axis   
        //(which is very application-specific)  
        if (mode == FirstPersonCameraMode.Free)  
        {  
            //The completely free-look camera shows the real power of quaternions.  
            //Them current camera orientation is simply multiplied by the rotation  
            //quaternion.  The rotation occurs with respect to the current  
            //orientation, avoiding gimble lock completely  
            orientation = orientation *  
                Quaternion.CreateFromAxisAngle(Vector3.Forward, radians);  
        }  
    } 